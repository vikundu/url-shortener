module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnalytic {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Analytic {
  id: ID!
  clickCount: Int!
  ipUrl: String!
  url: String!
}

type AnalyticConnection {
  pageInfo: PageInfo!
  edges: [AnalyticEdge]!
  aggregate: AggregateAnalytic!
}

input AnalyticCreateInput {
  id: ID
  clickCount: Int!
  ipUrl: String!
  url: String!
}

input AnalyticCreateManyInput {
  create: [AnalyticCreateInput!]
  connect: [AnalyticWhereUniqueInput!]
}

type AnalyticEdge {
  node: Analytic!
  cursor: String!
}

enum AnalyticOrderByInput {
  id_ASC
  id_DESC
  clickCount_ASC
  clickCount_DESC
  ipUrl_ASC
  ipUrl_DESC
  url_ASC
  url_DESC
}

type AnalyticPreviousValues {
  id: ID!
  clickCount: Int!
  ipUrl: String!
  url: String!
}

input AnalyticScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  clickCount: Int
  clickCount_not: Int
  clickCount_in: [Int!]
  clickCount_not_in: [Int!]
  clickCount_lt: Int
  clickCount_lte: Int
  clickCount_gt: Int
  clickCount_gte: Int
  ipUrl: String
  ipUrl_not: String
  ipUrl_in: [String!]
  ipUrl_not_in: [String!]
  ipUrl_lt: String
  ipUrl_lte: String
  ipUrl_gt: String
  ipUrl_gte: String
  ipUrl_contains: String
  ipUrl_not_contains: String
  ipUrl_starts_with: String
  ipUrl_not_starts_with: String
  ipUrl_ends_with: String
  ipUrl_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AnalyticScalarWhereInput!]
  OR: [AnalyticScalarWhereInput!]
  NOT: [AnalyticScalarWhereInput!]
}

type AnalyticSubscriptionPayload {
  mutation: MutationType!
  node: Analytic
  updatedFields: [String!]
  previousValues: AnalyticPreviousValues
}

input AnalyticSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnalyticWhereInput
  AND: [AnalyticSubscriptionWhereInput!]
  OR: [AnalyticSubscriptionWhereInput!]
  NOT: [AnalyticSubscriptionWhereInput!]
}

input AnalyticUpdateDataInput {
  clickCount: Int
  ipUrl: String
  url: String
}

input AnalyticUpdateInput {
  clickCount: Int
  ipUrl: String
  url: String
}

input AnalyticUpdateManyDataInput {
  clickCount: Int
  ipUrl: String
  url: String
}

input AnalyticUpdateManyInput {
  create: [AnalyticCreateInput!]
  update: [AnalyticUpdateWithWhereUniqueNestedInput!]
  upsert: [AnalyticUpsertWithWhereUniqueNestedInput!]
  delete: [AnalyticWhereUniqueInput!]
  connect: [AnalyticWhereUniqueInput!]
  set: [AnalyticWhereUniqueInput!]
  disconnect: [AnalyticWhereUniqueInput!]
  deleteMany: [AnalyticScalarWhereInput!]
  updateMany: [AnalyticUpdateManyWithWhereNestedInput!]
}

input AnalyticUpdateManyMutationInput {
  clickCount: Int
  ipUrl: String
  url: String
}

input AnalyticUpdateManyWithWhereNestedInput {
  where: AnalyticScalarWhereInput!
  data: AnalyticUpdateManyDataInput!
}

input AnalyticUpdateWithWhereUniqueNestedInput {
  where: AnalyticWhereUniqueInput!
  data: AnalyticUpdateDataInput!
}

input AnalyticUpsertWithWhereUniqueNestedInput {
  where: AnalyticWhereUniqueInput!
  update: AnalyticUpdateDataInput!
  create: AnalyticCreateInput!
}

input AnalyticWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  clickCount: Int
  clickCount_not: Int
  clickCount_in: [Int!]
  clickCount_not_in: [Int!]
  clickCount_lt: Int
  clickCount_lte: Int
  clickCount_gt: Int
  clickCount_gte: Int
  ipUrl: String
  ipUrl_not: String
  ipUrl_in: [String!]
  ipUrl_not_in: [String!]
  ipUrl_lt: String
  ipUrl_lte: String
  ipUrl_gt: String
  ipUrl_gte: String
  ipUrl_contains: String
  ipUrl_not_contains: String
  ipUrl_starts_with: String
  ipUrl_not_starts_with: String
  ipUrl_ends_with: String
  ipUrl_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AnalyticWhereInput!]
  OR: [AnalyticWhereInput!]
  NOT: [AnalyticWhereInput!]
}

input AnalyticWhereUniqueInput {
  id: ID
  ipUrl: String
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Link {
  id: ID!
  createdAt: DateTime!
  url: String!
  shortUrl: String!
  analytics(where: AnalyticWhereInput, orderBy: AnalyticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Analytic!]
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  url: String!
  shortUrl: String!
  analytics: AnalyticCreateManyInput
}

input LinkCreateManyInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  url_ASC
  url_DESC
  shortUrl_ASC
  shortUrl_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  url: String!
  shortUrl: String!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  shortUrl: String
  shortUrl_not: String
  shortUrl_in: [String!]
  shortUrl_not_in: [String!]
  shortUrl_lt: String
  shortUrl_lte: String
  shortUrl_gt: String
  shortUrl_gte: String
  shortUrl_contains: String
  shortUrl_not_contains: String
  shortUrl_starts_with: String
  shortUrl_not_starts_with: String
  shortUrl_ends_with: String
  shortUrl_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateDataInput {
  url: String
  shortUrl: String
  analytics: AnalyticUpdateManyInput
}

input LinkUpdateInput {
  url: String
  shortUrl: String
  analytics: AnalyticUpdateManyInput
}

input LinkUpdateManyDataInput {
  url: String
  shortUrl: String
}

input LinkUpdateManyInput {
  create: [LinkCreateInput!]
  update: [LinkUpdateWithWhereUniqueNestedInput!]
  upsert: [LinkUpsertWithWhereUniqueNestedInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyMutationInput {
  url: String
  shortUrl: String
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateDataInput!
}

input LinkUpsertWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateDataInput!
  create: LinkCreateInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  shortUrl: String
  shortUrl_not: String
  shortUrl_in: [String!]
  shortUrl_not_in: [String!]
  shortUrl_lt: String
  shortUrl_lte: String
  shortUrl_gt: String
  shortUrl_gte: String
  shortUrl_contains: String
  shortUrl_not_contains: String
  shortUrl_starts_with: String
  shortUrl_not_starts_with: String
  shortUrl_ends_with: String
  shortUrl_not_ends_with: String
  analytics_every: AnalyticWhereInput
  analytics_some: AnalyticWhereInput
  analytics_none: AnalyticWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAnalytic(data: AnalyticCreateInput!): Analytic!
  updateAnalytic(data: AnalyticUpdateInput!, where: AnalyticWhereUniqueInput!): Analytic
  updateManyAnalytics(data: AnalyticUpdateManyMutationInput!, where: AnalyticWhereInput): BatchPayload!
  upsertAnalytic(where: AnalyticWhereUniqueInput!, create: AnalyticCreateInput!, update: AnalyticUpdateInput!): Analytic!
  deleteAnalytic(where: AnalyticWhereUniqueInput!): Analytic
  deleteManyAnalytics(where: AnalyticWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  analytic(where: AnalyticWhereUniqueInput!): Analytic
  analytics(where: AnalyticWhereInput, orderBy: AnalyticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Analytic]!
  analyticsConnection(where: AnalyticWhereInput, orderBy: AnalyticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnalyticConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  analytic(where: AnalyticSubscriptionWhereInput): AnalyticSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    